// import * as THREE from "three";
// import * as Framework from "./framework/BaseScene";

// import { ThreeApplication } from "./ThreeApplication";
// import { OrbitControls } from "three/examples/jsm/controls/OrbitControls";

// export class MainScene extends Framework.BaseScene {

//     private readonly camera: THREE.PerspectiveCamera;
//     private readonly cube: THREE.Mesh;

//     private readonly orbitControls: OrbitControls;

//     private readonly raycaster: THREE.Raycaster;
//     private readonly mousePosition: THREE.Vector2;

//     private readonly cameraMatUpdateCallback: (e: UIEvent) => void;

//     /**
//      * Generated by github autopilot ;)
//      */
//     private onDocumentMouseMove(event: MouseEvent): void {

//         /* I don't know what it does, so I'll leave it commented out. */
//         //event.preventDefault();

//         this.mousePosition.x =  (event.clientX / window.innerWidth)  * 2 - 1;
//         this.mousePosition.y = -(event.clientY / window.innerHeight) * 2 + 1;

//     }

//     public constructor(params: Framework.BaseSceneParameters) {

//         super(params);

//         this.camera = new THREE.PerspectiveCamera(75, (innerWidth / innerHeight), 0.1, 1000.0);
//         this.camera.name = "main-camera";
//         this.camera.position.z = 2;
//         this.add(this.camera);

//         const cubeGeometry = new THREE.BoxGeometry(1, 1, 1);
//         const cubeMaterial = new THREE.MeshNormalMaterial({});

//         this.cube = new THREE.Mesh(cubeGeometry, cubeMaterial);
//         this.cube.name = "main-cube";
//         this.add(this.cube);

//         this.orbitControls = new OrbitControls(this.camera, this.renderer.domElement);
//         this.orbitControls.enablePan = false;

//         this.raycaster = new THREE.Raycaster();
//         this.mousePosition = new THREE.Vector2();

//         this.cameraMatUpdateCallback = ThreeApplication.createPerspectiveCameraResizer(this.renderer, this.camera);
//         window.addEventListener("resize", this.cameraMatUpdateCallback);

//         document.addEventListener("mousemove", this.onDocumentMouseMove.bind(this));

//     }

//     public onInitialization = (params: Framework.InitializeParameters) => {

//         this.managerKey = params.key;

//     };

//     public onDestruction = () => {

//         window.removeEventListener("resize", this.cameraMatUpdateCallback);

//     };

//     public onUpdate = (params: Framework.UpdateParameters) => {

//         this.cube.rotateX(params.deltaTime);
//         this.cube.rotateZ(params.deltaTime);

//         this.raycaster.setFromCamera(this.mousePosition, this.camera);

//         const intersects = this.raycaster.intersectObject(this.cube);
        
//         this.cube.material = new THREE.MeshBasicMaterial({
//             color: intersects.length ? 0x00ff00 : 0xff0000,
//         });

//     };

//     public onRender = (params: Framework.RenderParameters) => {

//         this.renderer.render(this, this.camera);

//     };

// }
